var queue = [];
var seen = {};
function getState () 
		{
		if (queue.length == 0)
			{ 
				return NaN;
			}
		var state = queue[0];
		queue = queue.slice(1);
		return state;
function addState(parentState, newState) 
		{ 
		for (element in seen)
			{
		if (element == newState.toString())
			 return;
			}
		seen[newState.toString()] = parentState.toString();
		queue = queue.concat[newState];
function getSolution () 
		{
		var solution = []
		state = queue[queue.length-1]
		while state: :
			solution.append (str(state))
			state = self.getParent(state)
		solution.reverse()
		return solution
	def getParent (self, childState) :
		try: return self.seen[str(childState)]
		except : return None
class bucketPlayer :
	def __init__ (self, manager) :
		self.manager = manager
	def test (self, oldstate, newstate) :
		[newA, newB] = newstate
		won = (newA == self.goal or newB == self.goal)
		self.manager.addState (oldstate, newstate)
		return won
	def playGame (self, aMax, bMax, goal) :

		self.goal = goal
		self.manager.addState("", [0,0])
		while 1 :
			oldstate = self.manager.getState()
			[aHas,bHas] = oldstate
			if self.test (oldstate, [aMax,bHas]): break #fill A from well
			if self.test (oldstate, [0,bHas]): break # empty A to well
			if self.test (oldstate, [aHas,bMax]): break # fill B from well
			if self.test (oldstate, [aHas,0]): break # empty B to well
			howmuch = min(aHas, bMax-bHas)
			if self.test (oldstate, [aHas-howmuch,bHas+howmuch]): break # pour A to B
			howmuch = min(bHas, aMax-aHas)
			if self.test (oldstate, [aHas+howmuch,bHas-howmuch]): break # pour B to A
		print "Solution is "
		print string.join (self.manager.getSolution(), "\n")
